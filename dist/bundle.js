!function(e){var t={};function r(n){if(t[n])return t[n].exports;var u=t[n]={i:n,l:!1,exports:{}};return e[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)r.d(n,u,function(t){return e[t]}.bind(null,u));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=n(r(1)),o=document.querySelector("#input");document.querySelector("#btn").addEventListener("click",(function(e){var t=new u.default(o.value);console.log(t.solve())}))},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Empty=0]="Empty",e[e.Sum=1]="Sum",e[e.Substraction=2]="Substraction",e[e.Multiplier=3]="Multiplier"}(n||(n={}));var u=function(){function e(e){void 0===e&&(e=""),this._input=e}return e.prototype.solve=function(){if(null===this._input)throw new Error("Not value provided");for(var e=this._input.split(""),t=0,r=1,u=n.Empty,o=0;0!=e.length;){var i=e.pop();if(isNaN(Number(i))){switch(i){case"+":u=n.Sum;break;case"-":u=n.Substraction;break;case"*":u=n.Multiplier;break;default:throw new Error("Symbol '"+i+"' not recognized")}o+=t,t=0,r=1}else t+=Number(i)*r,r*=10}switch(u){case n.Sum:o+=t;break;case n.Substraction:o=t-o;break;case n.Multiplier:o*=t}return o},e}();t.default=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jYWxjdWxhdG9yLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaW5wdXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImFwcCIsImNvbnNvbGUiLCJsb2ciLCJzb2x2ZSIsIk9wZXJhdG9yIiwidGhpcyIsIl9pbnB1dCIsIkVycm9yIiwiaXRlbXMiLCJzcGxpdCIsIm51bWJlciIsIm11bHRpcGxpZXIiLCJvcGVyYXRvciIsIkVtcHR5IiwicmVzdWx0IiwibGVuZ3RoIiwiaXRlbSIsInBvcCIsImlzTmFOIiwiTnVtYmVyIiwiU3VtIiwiU3Vic3RyYWN0aW9uIiwiTXVsdGlwbGllciIsIkNhbGN1bGF0b3IiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFV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RUFDZCxNQUVBLEtBQUtOLEVBQVNpQixhQUNWUCxFQUFTSixFQUFTSSxFQUN0QixNQUVBLEtBQUtWLEVBQVNrQixXQUNWUixHQUFTSixFQU1qQixPQUFPSSxHQUVmLEVBbEVBLEdBb0VBLFVBQWVTIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCBDYWxjdWxhdG9yIGZyb20gJy4vY2FsY3VsYXRvcic7XHJcblxyXG5jb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnB1dCcpO1xyXG5jb25zdCBzb2x2ZTpIVE1MSW5wdXRFbGVtZW50ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J0bicpO1xyXG5cclxuc29sdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgIGNvbnN0IGFwcDpDYWxjdWxhdG9yID0gbmV3IENhbGN1bGF0b3IoaW5wdXQudmFsdWUhISk7XHJcbiAgICBjb25zb2xlLmxvZyhhcHAuc29sdmUoKSk7XHJcbn0pOyIsImVudW0gT3BlcmF0b3Ige1xyXG4gICAgRW1wdHksXHJcbiAgICBTdW0sXHJcbiAgICBTdWJzdHJhY3Rpb24sXHJcbiAgICBNdWx0aXBsaWVyXHJcbn07XHJcbmNsYXNzIENhbGN1bGF0b3J7XHJcblxyXG4gICAgcHJpdmF0ZSBfaW5wdXQ6c3RyaW5nO1xyXG4gICAgXHJcblxyXG4gICAgY29uc3RydWN0b3IoaW5wdXQ6IHN0cmluZyA9ICcnKXtcclxuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzb2x2ZSgpOiBudW1iZXJ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ05vdCB2YWx1ZSBwcm92aWRlZCcpO1xyXG4gICAgICAgIGxldCBpdGVtczogc3RyaW5nW10gPSB0aGlzLl9pbnB1dC5zcGxpdCgnJyk7XHJcbiAgICAgICAgbGV0IG51bWJlcjpudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBtdWx0aXBsaWVyOm51bWJlciA9IDE7XHJcbiAgICAgICAgbGV0IG9wZXJhdG9yOk9wZXJhdG9yID0gT3BlcmF0b3IuRW1wdHk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDpudW1iZXIgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlKGl0ZW1zLmxlbmd0aCAhPSAwKXtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLnBvcCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoaXNOYU4oTnVtYmVyKGl0ZW0pKSl7XHJcbiAgICAgICAgICAgICAgICAvL25vdCBhIG51bWJlclxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJysnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9IE9wZXJhdG9yLlN1bTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnLSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gT3BlcmF0b3IuU3Vic3RyYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcqJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IgPSBPcGVyYXRvci5NdWx0aXBsaWVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN5bWJvbCAnJHtpdGVtfScgbm90IHJlY29nbml6ZWRgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICBudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IDE7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyICs9IE51bWJlcihpdGVtKSAqIG11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyICo9IDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2gob3BlcmF0b3Ipe1xyXG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLlN1bTpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBudW1iZXI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5TdWJzdHJhY3Rpb246XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBudW1iZXIgLSByZXN1bHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5NdWx0aXBsaWVyOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVtYmVyICogcmVzdWx0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYWxjdWxhdG9yOyJdLCJzb3VyY2VSb290IjoiIn0=